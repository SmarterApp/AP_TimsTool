import org.apache.tools.ant.BuildException
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'io.github.robwin:jgitflow-gradle-plugin:0.5.0'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'checkstyle'
    id 'pmd'
    id 'findbugs'
    id 'jacoco'
    id 'maven-publish'
    id 'org.springframework.boot' version '1.5.21.RELEASE'
    id 'com.jfrog.artifactory' version '4.4.14'

}

apply plugin: 'application'
apply plugin: 'io.github.robwin.jgitflow'
apply plugin: 'project-report'

/***************************
 * dependency management
 ***************************/

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://airdev.jfrog.io/airdev/libs-releases/" }
    maven { url "https://airdev.jfrog.io/airdev/libs-snapshots/" }
}

configurations {
    compile.exclude module: 'spring-boot-starter-logging'
    compile.exclude module: 'spring-boot-starter-tomcat'

    application {
        mainClassName = 'org.opentestsystem.ap.timstool.TimsToolApplication'
    }
}

dependencies {

    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-aop'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-log4j2'
    compile 'org.springframework.security.oauth:spring-security-oauth2:2.3.7.RELEASE'

    compile 'commons-cli:commons-cli:1.4'

    compile 'org.apache.commons:commons-collections4:4.1'
    compile 'org.apache.commons:commons-lang3:3.5'

    compile 'org.apache.httpcomponents:httpclient:4.5.9'

    compile 'org.apache.logging.log4j:log4j-api:2.10.0'
    compile 'org.apache.logging.log4j:log4j-core:2.10.0'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.10.0'

    compileOnly 'org.projectlombok:lombok'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.assertj:assertj-core:3.12.2'
}

/***************************
 * build information
 ***************************/

springBoot {
    buildInfo()
}

processResources {
    filesMatching("**/application.yml") {
        expand project.properties
    }
}

/***************************
 * publishing
 ***************************/


task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing.publications {
    mavenJava(MavenPublication) {
        from components.java

        artifact sourceJar {
            classifier "sources"
        }
    }
}

artifactory {
    contextUrl = artifactoryUrl

    publish {
        repository {
            repoKey = project.version.contains('-SNAPSHOT') ? project.artifactorySnapshotPublish : project.artifactoryReleasePublish
            username = project.artifactoryUser
            password = project.artifactoryPassword
            maven = true
        }
        defaults {
            publications('mavenJava')
        }
    }
}

/***************************
 * Checkstyle
 ***************************/

checkstyle {
    ignoreFailures = true
}

/***************************
 * PMD
 ***************************/

pmd {
    ignoreFailures = true

    ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-j2ee',
            'java-javabeans',
            'java-junit',
            'java-naming',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-sunsecure',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
}

/***************************
 * FindBugs
 ***************************/

findbugs {
    ignoreFailures = true
    reportLevel = "medium"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
        html.stylesheet resources.text.fromFile('config/findbugs/findbugs-color.xsl')
    }
}

/***************************
 * set common version
 ***************************/

task updateCommonVersion {
    doLast {
        doCommonVersionUpdate(project.newCommonVersion)
    }
}

def doCommonVersionUpdate(String version) {
    String currentVersion = project.commonVersion
    File propertiesFile = project.file(Project.GRADLE_PROPERTIES)
    if (!propertiesFile.file) {
        propertiesFile.append("commonVersion=${version}")
    } else {
        try {
            project.ant.replace(file: propertiesFile, token: "commonVersion=${currentVersion}", value: "commonVersion=${version}", failOnNoReplacements: true)
        } catch (BuildException e) {
            throw new GradleException("Failed to update version in ${Project.GRADLE_PROPERTIES}.  Check the property exists and is formatted correctly.")
        }
    }
}

/***************************
 * gradle wrapper
 ***************************/

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

/***************************
 * Lifecycle enhancements
 ***************************/

tasks.artifactoryPublish.dependsOn 'build'

test.finalizedBy(jacocoTestReport)


/***************************
 * Generates scripts
 ***************************/


task cleanBin(type: Delete) {
    delete file('tims.sh')
}

task genBin(type: Copy) {
    from('template/') {
        filter(ReplaceTokens, tokens: ['version': project.version])
    }
    into "${project.projectDir}"
}

genBin.dependsOn cleanBin