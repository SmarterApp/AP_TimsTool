package org.opentestsystem.ap.timstool.commandline;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.timstool.ToolProperties;
import org.opentestsystem.ap.timstool.exception.UsageException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.timstool.commandline.ToolCommandLineCommands.CMD_CREATE_TEST_PACKAGE;

public class ToolCommandLineTest {

    ToolProperties toolProperties;

    ToolCommandLine toolCommandLine;

    @Before
    public void setUp() {
        toolProperties = new ToolProperties();
        toolProperties.setAppScriptName("tims");
        toolProperties.setApiGatewayUrl("https:/api-gateway");
        toolProperties.setCreateTestManagementEndpoint("/tms/create/test/package");
    }

    @Test
    public void testGetCommandName() {
        toolCommandLine = new ToolCommandLine(toolProperties, CMD_CREATE_TEST_PACKAGE, "-t", "auth123");
        assertThat(toolCommandLine.getCommandName()).isEqualTo(CMD_CREATE_TEST_PACKAGE);
    }



    @Test
    public void testToolCommandLineAuthOption() {
        toolCommandLine = new ToolCommandLine(toolProperties, CMD_CREATE_TEST_PACKAGE, "-t", "auth123");
        assertThat(toolCommandLine.hasAuthToken()).isTrue();
        assertThat(toolCommandLine.getAuthToken()).isEqualTo("auth123");
    }

    @Test
    public void testToolCommandLineInputOption() {
        toolCommandLine = new ToolCommandLine(toolProperties, CMD_CREATE_TEST_PACKAGE, "-i", "input.txt");
        assertThat(toolCommandLine.hasInputFile()).isTrue();
        assertThat(toolCommandLine.getInputFile()).isEqualTo("input.txt");
    }

    @Test
    public void testToolCommandLineOutputOption() {
        toolCommandLine = new ToolCommandLine(toolProperties, CMD_CREATE_TEST_PACKAGE, "-o", "output.xml");
        assertThat(toolCommandLine.hasOutputFile()).isTrue();
        assertThat(toolCommandLine.getOutputFile()).isEqualTo("output.xml");
    }

    @Test
    public void testToolCommandLineHelpOption() {
        toolCommandLine = new ToolCommandLine(toolProperties, CMD_CREATE_TEST_PACKAGE, "-h");
        assertThat(toolCommandLine.hasShowHelp()).isTrue();
    }

    @Test
    public void testToolCommandLineCommandOption() {
        toolCommandLine = new ToolCommandLine(toolProperties, CMD_CREATE_TEST_PACKAGE, "-c");
        assertThat(toolCommandLine.hasShowCommands()).isTrue();
    }
    @Test
    public void testIsCommandMissing() {
        toolCommandLine = new ToolCommandLine(toolProperties, "-i", "input.txt");
        assertThat(toolCommandLine.isCommandMissing()).isTrue();
        toolCommandLine = new ToolCommandLine(toolProperties, CMD_CREATE_TEST_PACKAGE, "-i", "input.txt");
        assertThat(toolCommandLine.isCommandMissing()).isFalse();
    }

    @Test
    public void testValidateCommonUsage() {
        // one arg is present, no exception expected
        toolCommandLine = new ToolCommandLine(toolProperties, CMD_CREATE_TEST_PACKAGE, "-i", "input.txt", "-o", "output.txt", "-t", "auth-token-123");
        toolCommandLine.validateCommonUsage();

        // two commands present, expecting UsageException
        toolCommandLine = new ToolCommandLine(toolProperties, CMD_CREATE_TEST_PACKAGE, "generate-user-report", "-i", "input.txt", "-o", "output.txt", "-t", "auth-token-123");
        try {
            toolCommandLine.validateCommonUsage();
            Assert.fail("Exected UsageException to be thrown");
        } catch (UsageException e) {
            assertThat(e.getMessage()).isEqualTo("More than one command was given.  Only one command is allowed.");
        }
    }
}

