package org.opentestsystem.ap.timstool.command;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.timstool.ToolProperties;
import org.opentestsystem.ap.timstool.commandline.ToolCommandLine;
import org.opentestsystem.ap.timstool.commandline.ToolCommands;
import org.opentestsystem.ap.timstool.exception.UsageException;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.eq;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class CreateTestPackageCommandTest {

    static final String COMMAND_NAME = CommandEnum.CreateTestPackage.getText();

    static final String OUTPUT_FILE_NAME = "output.xml";

    static final Path OUT_PUT_FILE_PATH = Paths.get(OUTPUT_FILE_NAME);

    ToolProperties toolProperties;

    ToolCommandLine toolCommandLine;

    CreateTestPackageCommand command;

    @Mock
    ToolCommands commandLineCommands;

    @Mock
    RestTemplate restTemplate;

    @Mock
    ResponseEntity responseEntity;

    ArgumentCaptor<HttpEntity> argumentCaptor;

    @Before
    public void setUp() throws IOException {
        toolProperties = new ToolProperties();
        toolProperties.setAppScriptName("tims");
        toolProperties.setApiGatewayUrl("https:/api-gateway");
        toolProperties.setCreateTestManagementEndpoint("/tms/create/test/package");

        command = new CreateTestPackageCommand(toolProperties, restTemplate);

        argumentCaptor = ArgumentCaptor.forClass(HttpEntity.class);

        toolCommandLine = new ToolCommandLine(toolProperties, commandLineCommands);

        deleteOutputFile();
    }

    @After
    public void tearDown() throws IOException {
        deleteOutputFile();
    }

    void deleteOutputFile() throws IOException {
        if (Files.exists(OUT_PUT_FILE_PATH)) {
            Files.delete(OUT_PUT_FILE_PATH);
        }
    }

    @Test
    public void testExecuteSuccess() {
        when(responseEntity.getBody()).thenReturn("<report>SUCCESS</report>");
        when(
            restTemplate.postForEntity(
                eq(toolProperties.getCreateTestManagementEndpoint()),
                argumentCaptor.capture(),
                eq(String.class)))
            .thenReturn(responseEntity);

        toolCommandLine.applyArgs(
            COMMAND_NAME,
            "-i", "input.txt",
            "-o", "output.xml",
            "-t", "auth-token-123");

        command.execute(toolCommandLine);

        assertThat(Files.exists(OUT_PUT_FILE_PATH)).isTrue();

        assertThat(argumentCaptor.getValue().getHeaders().get("Authorization")).contains("Bearer auth-token-123");
        assertThat(argumentCaptor.getValue().getHeaders().getContentType().toString()).isEqualTo("multipart/form-data");

        MultiValueMap<String, Object> body = (MultiValueMap<String, Object>) argumentCaptor.getValue().getBody();

        assertThat(body.get("file")).hasSize(1);
        assertThat(body.get("file").get(0)).isInstanceOf(Resource.class);
    }

    @Test
    public void testWhenNoInputFileOptionGiven() {
        toolCommandLine.applyArgs(
            COMMAND_NAME,
            "-o", "output.txt",
            "-t", "auth-token-123");
        assertCommandValidation(toolCommandLine, "Command create-test-package requires an input file be specified.");
    }

    @Test
    public void testWhenNoOutputFileOptionGiven() {
        toolCommandLine.applyArgs(
            COMMAND_NAME,
            "-i", "input.txt",
            "-t", "auth-token-123");
        assertCommandValidation(toolCommandLine, "Command create-test-package requires an output file be specified.");
    }

    @Test
    public void testWhenNoAuthTokenOptionGiven() {
        toolCommandLine.applyArgs(
            COMMAND_NAME,
            "-i", "input.txt",
            "-o", "output.txt");
        assertCommandValidation(toolCommandLine,
            "Command create-test-package requires an authorization token be specified.");
    }

    void assertCommandValidation(ToolCommandLine toolCommandLine, String expectedErrorMessage) {
        try {
            command.execute(toolCommandLine);
            Assert.fail("Expected UsageException");
        } catch (UsageException e) {
            assertThat(e.getMessage()).isEqualTo(expectedErrorMessage);
        }
    }
}