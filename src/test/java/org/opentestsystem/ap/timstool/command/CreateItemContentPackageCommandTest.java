package org.opentestsystem.ap.timstool.command;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.timstool.ToolProperties;
import org.opentestsystem.ap.timstool.commandline.ToolCommandLine;
import org.opentestsystem.ap.timstool.commandline.ToolCommands;
import org.opentestsystem.ap.timstool.exception.UsageException;
import org.opentestsystem.ap.timstool.model.CreateItemContentPackageResponse;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.client.OAuth2RestOperations;

import java.util.Arrays;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class CreateItemContentPackageCommandTest {

    static final String COMMAND_NAME = CommandEnum.CreateItemContentPackage.getText();

    private ToolProperties toolProperties;

    private ToolCommandLine toolCommandLine;

    private CreateItemContentPackageCommand command;

    @Mock
    private ToolCommands mockCommandLineCommands;

    @Mock
    private OAuth2RestOperations mockRestTemplate;

    @Mock
    private ResponseEntity mockResponseEntity;

    private ArgumentCaptor<HttpEntity> argumentCaptor;

    @Before
    public void setUp() {
        toolProperties = new ToolProperties();
        toolProperties.setAppScriptName("tims");
        toolProperties.setApiGatewayUrl("https:/api-gateway");
        toolProperties.setTranslationContentPackageEndpoint("/translation/content-packages");

        command = new CreateItemContentPackageCommand(toolProperties, mockRestTemplate);

        argumentCaptor = ArgumentCaptor.forClass(HttpEntity.class);

        toolCommandLine = new ToolCommandLine(toolProperties, mockCommandLineCommands);
    }

    @Test
    public void testExecuteSuccess() {
        when(mockResponseEntity.getBody()).thenReturn(
            new CreateItemContentPackageResponse(1, Arrays.asList("1234","5678"), "SUCCESS"));
        when(mockResponseEntity.getStatusCode()).thenReturn(HttpStatus.CREATED);
        when(
            mockRestTemplate.postForEntity(
                eq(String.format("%s/%s", toolProperties.getApiGatewayUrl(), toolProperties.getTranslationContentPackageEndpoint())),
                argumentCaptor.capture(),
                eq(CreateItemContentPackageResponse.class)))
            .thenReturn(mockResponseEntity);

        toolCommandLine.applyArgs(
            COMMAND_NAME,
            "-d", "1234,5678");

        command.execute(toolCommandLine);

        assertIncludeTutorials(argumentCaptor.getValue().getBody(), true);
        assertThat(argumentCaptor.getValue().getHeaders().getContentType().toString()).isEqualTo("application/json");
    }

    @Test
    public void testExecuteSuccessWithNoTutorial() {
        when(mockResponseEntity.getBody()).thenReturn(
            new CreateItemContentPackageResponse(1, Arrays.asList("1234","5678"), "SUCCESS"));
        when(mockResponseEntity.getStatusCode()).thenReturn(HttpStatus.CREATED);
        when(
            mockRestTemplate.postForEntity(
                eq(String.format("%s/%s", toolProperties.getApiGatewayUrl(), toolProperties.getTranslationContentPackageEndpoint())),
                argumentCaptor.capture(),
                eq(CreateItemContentPackageResponse.class)))
            .thenReturn(mockResponseEntity);

        toolCommandLine.applyArgs(
            COMMAND_NAME,
            "-d", "1234,5678", "-notut");

        command.execute(toolCommandLine);

        assertIncludeTutorials(argumentCaptor.getValue().getBody(), false);
        assertThat(argumentCaptor.getValue().getHeaders().getContentType().toString()).isEqualTo("application/json");
    }

    @Test
    public void testExecuteSuccessWithError() {
        when(mockResponseEntity.getBody()).thenReturn(
            new CreateItemContentPackageResponse(1, Arrays.asList("1234","5678"), "FAILURE"));
        when(mockResponseEntity.getStatusCode()).thenReturn(HttpStatus.UNAUTHORIZED);
        when(
            mockRestTemplate.postForEntity(
                eq(String.format("%s/%s", toolProperties.getApiGatewayUrl(), toolProperties.getTranslationContentPackageEndpoint())),
                argumentCaptor.capture(),
                eq(CreateItemContentPackageResponse.class)))
            .thenReturn(mockResponseEntity);

        toolCommandLine.applyArgs(
            COMMAND_NAME,
            "-d", "1234,5678");

        command.execute(toolCommandLine);
        assertThat(argumentCaptor.getValue().getHeaders().getContentType().toString()).isEqualTo("application/json");
    }

    @Test
    public void testExecuteSuccessWithWhitespace() {
        when(mockResponseEntity.getBody()).thenReturn(
            new CreateItemContentPackageResponse(1, Arrays.asList("1234","5678"), "SUCCESS"));
        when(mockResponseEntity.getStatusCode()).thenReturn(HttpStatus.CREATED);
        when(
            mockRestTemplate.postForEntity(
                eq(String.format("%s/%s", toolProperties.getApiGatewayUrl(), toolProperties.getTranslationContentPackageEndpoint())),
                argumentCaptor.capture(),
                eq(CreateItemContentPackageResponse.class)))
            .thenReturn(mockResponseEntity);

        toolCommandLine.applyArgs(
            COMMAND_NAME,
            "-d", "1234,     5678");

        command.execute(toolCommandLine);

        assertThat(argumentCaptor.getValue().getHeaders().getContentType().toString()).isEqualTo("application/json");
    }

    @Test
    public void testWhenNoItemIdsOptionGiven() {
        toolCommandLine.applyArgs(
            COMMAND_NAME);
        assertCommandValidation(toolCommandLine, "Command create-saaif-content-package requires a list of item ids to be specified.");
    }

    void assertCommandValidation(ToolCommandLine toolCommandLine, String expectedErrorMessage) {
        try {
            command.execute(toolCommandLine);
            Assert.fail("Expected UsageException");
        } catch (UsageException e) {
            assertThat(e.getMessage()).isEqualTo(expectedErrorMessage);
        }
    }

    void assertIncludeTutorials(final Object request, final boolean expected) {
        final CreateItemContentPackageCommand.CreateItemContentPackageRequest packageRequest =
                (CreateItemContentPackageCommand.CreateItemContentPackageRequest) request;

        assertThat(packageRequest.isIncludeTutorial()).isEqualTo(expected);
    }

}
