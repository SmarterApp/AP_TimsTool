package org.opentestsystem.ap.timstool.command;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.timstool.exception.CommandException;
import org.springframework.beans.FatalBeanException;
import org.springframework.context.ApplicationContext;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class CommandProviderTest {

    String beanName = "createTestPackageCommand";

    @Mock
    Command command;

    @Mock
    ApplicationContext context;

    CommandProvider commandProvider;

    @Before
    public void setUp() {
        commandProvider = new CommandProvider();
        commandProvider.setApplicationContext(context);
    }

    @Test
    public void testGetCommandBean() {
        when(context.getBean(beanName, Command.class)).thenReturn(command);
        Command actual = commandProvider.getCommandBean(beanName);
        assertThat(actual).isEqualTo(command);
    }

    @Test
    public void testGetCommandBeanAndThrowBeanException() {
        String errorMessage = "bean not found";
        FatalBeanException exception = new FatalBeanException(errorMessage);
        when(context.getBean(beanName, Command.class)).thenThrow(exception);
        try {
            commandProvider.getCommandBean(beanName);
            fail("Expected CommandException to be thrown");
        } catch (CommandException e) {
            assertThat(e.getMessage()).isEqualTo("Error getting command bean for " + beanName + ": " + errorMessage);
        }
    }
}