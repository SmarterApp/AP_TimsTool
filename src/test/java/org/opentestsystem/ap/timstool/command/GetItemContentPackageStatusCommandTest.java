package org.opentestsystem.ap.timstool.command;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.timstool.ToolProperties;
import org.opentestsystem.ap.timstool.commandline.ToolCommandLine;
import org.opentestsystem.ap.timstool.commandline.ToolCommands;
import org.opentestsystem.ap.timstool.exception.UsageException;
import org.opentestsystem.ap.timstool.model.CreateItemContentPackageResponse;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.client.OAuth2RestOperations;

import java.util.Arrays;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class GetItemContentPackageStatusCommandTest {

    static final String COMMAND_NAME = CommandEnum.GetItemContentStatusCommand.getText();

    private ToolProperties toolProperties;

    private ToolCommandLine toolCommandLine;

    private GetItemContentPackageStatusCommand command;

    @Mock
    private ToolCommands mockCommandLineCommands;

    @Mock
    private OAuth2RestOperations mockRestTemplate;

    @Mock
    private ResponseEntity mockResponseEntity;

    private ArgumentCaptor<HttpEntity> argumentCaptor;

    @Before
    public void setUp() {
        toolProperties = new ToolProperties();
        toolProperties.setAppScriptName("tims");
        toolProperties.setApiGatewayUrl("https:/api-gateway");
        toolProperties.setTranslationContentPackageEndpoint("/translation/content-packages");

        command = new GetItemContentPackageStatusCommand(toolProperties, mockRestTemplate);

        argumentCaptor = ArgumentCaptor.forClass(HttpEntity.class);

        toolCommandLine = new ToolCommandLine(toolProperties, mockCommandLineCommands);
    }

    @Test
    public void testExecuteSuccess() {
        final long contentPackageId = 1;
        when(mockResponseEntity.getBody()).thenReturn(
            new CreateItemContentPackageResponse(1, Arrays.asList("1234", "5678"), "SUCCESS"));
        when(mockResponseEntity.getStatusCode()).thenReturn(HttpStatus.OK);
        when(
            mockRestTemplate.exchange(
                eq(String.format("%s/%s/%s", toolProperties.getApiGatewayUrl(),
                    toolProperties.getTranslationContentPackageEndpoint(), contentPackageId)),
                eq(HttpMethod.GET),
                argumentCaptor.capture(),
                eq(CreateItemContentPackageResponse.class)))
            .thenReturn(mockResponseEntity);

        toolCommandLine.applyArgs(
            COMMAND_NAME,
            String.valueOf(contentPackageId));

        command.execute(toolCommandLine);
    }

    @Test
    public void testWhenNoContentPackageArgGiven() {
        toolCommandLine.applyArgs(
            COMMAND_NAME,
            "-o", "output.zip");
        assertCommandValidation(toolCommandLine,
            "Command get-saaif-content-package-status requires a content package id be specified.");
    }


    void assertCommandValidation(ToolCommandLine toolCommandLine, String expectedErrorMessage) {
        try {
            command.execute(toolCommandLine);
            Assert.fail("Expected UsageException");
        } catch (UsageException e) {
            assertThat(e.getMessage()).isEqualTo(expectedErrorMessage);
        }
    }
}
