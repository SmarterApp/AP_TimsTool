/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.opentestsystem.ap.timstool;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.timstool.command.CommandEnum;
import org.opentestsystem.ap.timstool.command.CreateTestPackageCommand;
import org.opentestsystem.ap.timstool.commandline.ToolCommandLine;
import org.opentestsystem.ap.timstool.exception.CommandException;
import org.opentestsystem.ap.timstool.exception.UsageException;

import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class TimsToolApplicationTest {

    static final String commandName = CommandEnum.CreateTestPackage.getText();

    @Mock
    ToolCommandLine toolCommandLine;

    @Mock
    CreateTestPackageCommand command;

    TimsToolApplication app;

    @Before
    public void setUp() {
        when(toolCommandLine.getCommandInstance()).thenReturn(command);
        this.app = new TimsToolApplication(toolCommandLine);
    }

    @Test
    public void testAppRunWithHelpOption() {
        when(toolCommandLine.hasShowHelp()).thenReturn(true);
        this.app.run("-h");
        verify(toolCommandLine, times(1)).applyArgs("-h");
        verify(toolCommandLine, times(1)).printHelp();
    }

    @Test
    public void testAppRunWithCommandsOption() {
        when(toolCommandLine.hasShowCommands()).thenReturn(true);
        this.app.run("-c");
        verify(toolCommandLine, times(1)).applyArgs("-c");
        verify(toolCommandLine, times(1)).printCommands();
    }

    @Test
    public void testAppRunWithMissingCommand() {
        when(toolCommandLine.isCommandMissing()).thenReturn(true);
        this.app.run("-i", "input-file.xlsx");
        verify(toolCommandLine, times(1)).applyArgs("-i", "input-file.xlsx");
        verify(toolCommandLine, times(1)).printMessage("The command to execute is missing.");
        verify(toolCommandLine, times(1)).printHelp();
    }

    @Test
    public void testAppRunSuccessfully() {
        when(toolCommandLine.getCommandInstance()).thenReturn(command);
        this.app.run(commandName, "-i", "input.xlsx", "-o", "output.xml", "-t", "auth-token-123");
        verify(toolCommandLine, times(1)).validateCommand();
        verify(command, times(1)).execute(toolCommandLine);
    }

    @Test
    public void testAppRunWhenUsageErrorThrown() {
        doThrow(new UsageException("usage error")).when(toolCommandLine).validateCommand();
        this.app.run(commandName);
        verify(toolCommandLine, times(1)).printUsageError("usage error");
    }

    @Test
    public void testAppRunWhenCommandErrorThrown() {
        doThrow(new CommandException("command error")).when(command).execute(toolCommandLine);
        this.app.run(commandName);
        verify(toolCommandLine, times(1)).printCommandError("command error");
    }

    @Test
    public void testAppRunWhenUnexpectedErrorThrown() {
        doThrow(new RuntimeException("runtime error")).when(command).execute(toolCommandLine);
        this.app.run(commandName);
        verify(toolCommandLine, times(1)).printMessage("Unexpected error: runtime error");
    }

}
