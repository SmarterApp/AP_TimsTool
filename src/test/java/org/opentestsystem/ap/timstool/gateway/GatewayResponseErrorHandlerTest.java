package org.opentestsystem.ap.timstool.gateway;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.timstool.exception.CommandException;
import org.springframework.http.HttpStatus;
import org.springframework.http.client.ClientHttpResponse;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class GatewayResponseErrorHandlerTest {

    String gatewayErrorJson =
        "{\n" +
        "    \"error\": \"unauthorized\",\n" +
        "    \"error_description\": \"Full authentication is required to access this resource\"\n" +
        "}";

    String gatewayErrorExpectedException = "401 (Unauthorized): unauthorized - Full authentication is required to access this resource";

    String gatewayErrorMessagesJson =
        "[\n" +
        "    {\"message\": \"item 123 not found\"},\n" +
        "    {\"message\": \"item 456 - tutorial 789 not found\"}\n" +
        "]";

    String gatewayErrorMessageExpectedException = "404 (Not Found): \n" +
        "\titem 123 not found\n" +
        "\titem 456 - tutorial 789 not found\n";

    ByteArrayInputStream errorResponseBody;

    ByteArrayInputStream errorMessageResponseBody;

    @Mock
    ClientHttpResponse clientHttpResponse;

    GatewayResponseErrorHandler gatewayResponseErrorHandler;

    @Before
    public void setUp() {
        errorResponseBody = new ByteArrayInputStream(gatewayErrorJson.getBytes());
        errorMessageResponseBody = new ByteArrayInputStream(gatewayErrorMessagesJson.getBytes());
        gatewayResponseErrorHandler = new GatewayResponseErrorHandler();
    }

    @Test
    public void testHandleErrorWhenStatusUnauthorized() throws IOException {
        when(clientHttpResponse.getStatusCode()).thenReturn(HttpStatus.UNAUTHORIZED);
        when(clientHttpResponse.getBody()).thenReturn(errorResponseBody);
        try {
            gatewayResponseErrorHandler.handleError(clientHttpResponse);
            fail("expected CommandException to be thrown");
        } catch (CommandException e) {
            assertThat(e.getMessage()).isEqualTo(gatewayErrorExpectedException);
        }
    }

    @Test
    public void testHandleErrorWhenStatusNotFound() throws IOException {
        when(clientHttpResponse.getStatusCode()).thenReturn(HttpStatus.NOT_FOUND);
        when(clientHttpResponse.getBody()).thenReturn(errorMessageResponseBody);
        try {
            gatewayResponseErrorHandler.handleError(clientHttpResponse);
            fail("expected CommandException to be thrown");
        } catch (CommandException e) {
            assertThat(e.getMessage()).isEqualTo(gatewayErrorMessageExpectedException);
        }
    }

    /**
     * Confirm when a http status is returned the handler does not check for that no error is thrown.
     */
    @Test
    public void testHandleErrorWhenStatusNotHandled() throws IOException {
        when(clientHttpResponse.getStatusCode()).thenReturn(HttpStatus.I_AM_A_TEAPOT);
        gatewayResponseErrorHandler.handleError(clientHttpResponse);
    }
}