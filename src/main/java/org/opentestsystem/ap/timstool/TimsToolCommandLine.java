package org.opentestsystem.ap.timstool;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.opentestsystem.ap.timstool.exceptions.TimsToolUsageException;

import java.io.PrintStream;
import java.util.HashSet;
import java.util.Set;

/**
 * Wrapper for a {@link CommandLine} instance.  The methods are tailored to the TIMS Tool.
 */
@Slf4j
@Getter
public class TimsToolCommandLine {

    private static final String EMPTY = "";

    private static final String USAGE_TEXT = "USAGE: tims [option...] command";

    private static final PrintStream CONSOLE = System.out;

    private final TimsToolCommandLineCommands commandLineCommands;

    private final TimsToolCommandLineOptions commandLineOptions;

    private final CommandLine commandLine;

    private final HelpFormatter helpFormatter;

    public TimsToolCommandLine(String... args) {

        this.commandLineCommands = new TimsToolCommandLineCommands();

        this.commandLineOptions = new TimsToolCommandLineOptions();

        this.helpFormatter = new HelpFormatter();
        CommandLineParser parser = new DefaultParser();
        try {
            this.commandLine = parser.parse(this.commandLineOptions.getOptions(), args);
        } catch (ParseException e) {
            String error = "Unexpected exception: " + e.getMessage();
            log.error(error, e);
            throw new RuntimeException(error);
        }
    }

    // ------------------------------------------------------------------------

    public String getCommandName() {
        String command = this.commandLine.getArgList().get(0);
        if (commandLineCommands.isValid(command)) {
            throw new TimsToolUsageException("Command '" + command + "' is not valid");
        }
        return command;
    }

    public String getInputFile() {
        return this.commandLine.getOptionValue(commandLineOptions.getInputFile().getOpt());
    }

    // ------------------------------------------------------------------------

    /**
     * Common usage is validation prior to knowing the command being executed.  Once the command being executed is known
     * then specific validation are run for it.
     */
    public void validateCommonUsage() {
        if (this.commandLine.getArgList().size() > 1) {
            this.printUsageError("More than one command was given.  Only one command is allowed.");
        }
    }

    public boolean isShowHelp() {
        return this.commandLine.hasOption("h");
    }

    public boolean isCommandMissing() {
        return this.commandLine.getArgList().isEmpty();
    }

    // ------------------------------------------------------------------------

    public void printCommandError(String message) {
        CONSOLE.println(message);
    }

    public void printUsageError(String message) {
        CONSOLE.println(message);
        this.printUsage();
    }

    public void printUsage() {
        CONSOLE.println(EMPTY);
        CONSOLE.println(USAGE_TEXT);
        CONSOLE.println(EMPTY);
    }

    public void printHelp() {
        this.helpFormatter.printHelp("tims", this.commandLineOptions.getOptions());
    }

    // ------------------------------------------------------------------------

    @Getter
    public static class TimsToolCommandLineCommands {
        public static final String CMD_CREATE_TEST_PACKAGE = "create-test-package";

        private Set<String> commands;

        public TimsToolCommandLineCommands() {
            this.commands = new HashSet<>();
            this.commands.add(CMD_CREATE_TEST_PACKAGE);
        }

        /**
         * True if the given command name is a valid TIMS tool command.  False otherwise.
         *
         * @param commandName The command name to validate.
         * @return True if the command name is valid.
         */
        public boolean isValid(String commandName) {
            return this.commands.contains(commandName);
        }
    }

    /**
     * The command line options for the TIMS Tool.
     */
    @Getter
    public static class TimsToolCommandLineOptions {
        /**
         * The application's options list.
         */
        private final Options options;

        /**
         * The help option for the application.
         */
        private final Option help;

        /**
         * The input file for commands requiring a file to be uploaded.
         */
        private final Option inputFile;

        /**
         * The output file for commands with results that are written to disk.
         */
        private final Option outputFile;

        public TimsToolCommandLineOptions() {
            this.help = Option.builder("h").longOpt("help")
                .desc("Prints this message.").build();

            this.inputFile = Option.builder("i").longOpt("input")
                .hasArg().argName("file")
                .desc("Specifies the input file.").build();

            this.outputFile = Option.builder("o").longOpt("output")
                .hasArg().argName("file")
                .desc("Specifies the output file.").build();

            this.options = new Options();
            this.options.addOption(help);
            this.options.addOption(inputFile);
            this.options.addOption(outputFile);
        }
    }
}
