package org.opentestsystem.ap.timstool.gateway;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.ap.timstool.exception.CommandException;
import org.springframework.http.HttpStatus;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.util.StreamUtils;
import org.springframework.web.client.DefaultResponseErrorHandler;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Arrays;

/**
 * API gateway responses vary depending on the error and where it originates.  This class handles cases where we want to
 * explicitly parse information from the response.  The default behavior for errors not handled here is to be printed to
 * the user as a string.  The user would see JSON, XML, or whatever text was returned in the error.
 */
public class GatewayResponseErrorHandler extends DefaultResponseErrorHandler {

    private static final Charset UTF_8 = Charset.forName("UTF-8");

    private final ObjectMapper mapper = new ObjectMapper();

    @Override
    public void handleError(ClientHttpResponse httpResponse) throws IOException {
        if (httpResponse.getStatusCode() == HttpStatus.UNAUTHORIZED) {
            String responseString = StreamUtils.copyToString(httpResponse.getBody(), UTF_8);
            GatewayError error = mapper.readValue(responseString.getBytes(), GatewayError.class);
            throw new CommandException(this.genErrMsg(HttpStatus.UNAUTHORIZED, error));
        } else if (httpResponse.getStatusCode() == HttpStatus.NOT_FOUND) {
            String responseString = StreamUtils.copyToString(httpResponse.getBody(), UTF_8);
            GatewayMessage[] error = mapper.readValue(responseString.getBytes(), GatewayMessage[].class);
            throw new CommandException(this.genErrMsg(HttpStatus.NOT_FOUND, error));
        }
    }

    private String genErrMsg(HttpStatus status, GatewayError error) {
        return String.format(
            "%s (%s): %s - %s",
            status.value(), status.getReasonPhrase(), error.getError(), error.getErrorDescription());
    }

    private String genErrMsg(HttpStatus status, GatewayMessage[] messages) {
        StringBuilder errorMessage = new StringBuilder()
            .append(
                String.format("%s (%s): %n", status.value(), status.getReasonPhrase())
            );
        Arrays.stream(messages).forEach(msg -> errorMessage.append(String.format("\t%s%n", msg.getMessage())));
        return errorMessage.toString();
    }
}



