package org.opentestsystem.ap.timstool.commandline;

import org.opentestsystem.ap.timstool.command.Command;
import org.opentestsystem.ap.timstool.command.CommandEnum;

import java.util.Collection;
import java.util.Map;
import java.util.stream.Collectors;

public class ToolCommandLineCommands {

    private final Map<CommandEnum, Command> commands;

    public ToolCommandLineCommands(Map<CommandEnum, Command> commands) {
        this.commands = commands;
    }

    public Collection<String> getCommands() {
        return this.commands.keySet().stream().map(CommandEnum::getText).collect(Collectors.toList());
    }

    public Command getCommandInstance(String command) {
        return this.commands.get(this.toEnum(command));
    }

    /**
     * True if the given command name is a valid TIMS tool command.  False otherwise.
     *
     * @param command The command name to validate.
     * @return True if the command name is valid.
     */
    public boolean isValid(String command) {
        return this.commands.containsKey(this.toEnum(command));
    }

    /**
     * True if the given command name is not a valid TIMS tool command.  False if it is valid.
     *
     * @param command The command name to check.
     * @return True if the command name is not valid.
     */
    public boolean isNotValid(String command) {
        return !this.isValid(command);
    }

    private CommandEnum toEnum(String text) {
        return CommandEnum.fromText(text);
    }
}

