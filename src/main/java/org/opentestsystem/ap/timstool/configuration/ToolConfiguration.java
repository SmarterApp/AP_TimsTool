package org.opentestsystem.ap.timstool.configuration;

import org.apache.http.impl.client.CloseableHttpClient;
import org.opentestsystem.ap.timstool.ToolProperties;
import org.opentestsystem.ap.timstool.gateway.GatewayResponseErrorHandler;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.scheduling.TaskScheduler;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import org.springframework.web.client.RestTemplate;

@Configuration
@EnableConfigurationProperties({ToolProperties.class})
public class ToolConfiguration {

    private final ToolProperties properties;

    private final CloseableHttpClient httpClient;

    public ToolConfiguration(ToolProperties properties,
                             CloseableHttpClient httpClient) {
        this.properties = properties;
        this.httpClient = httpClient;
    }

    @Bean
    public RestTemplate restTemplate(RestTemplateBuilder builder) {
        return builder
            .rootUri(properties.getApiGatewayUrl())
            .requestFactory(clientHttpRequestFactory())
            .errorHandler(new GatewayResponseErrorHandler())
            .build();
    }

    @Bean
    public HttpComponentsClientHttpRequestFactory clientHttpRequestFactory() {
        HttpComponentsClientHttpRequestFactory clientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory();
        clientHttpRequestFactory.setHttpClient(httpClient);
        return clientHttpRequestFactory;
    }

    @Bean
    public TaskScheduler taskScheduler() {
        ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();
        scheduler.setThreadNamePrefix("poolScheduler");
        scheduler.setPoolSize(5);
        return scheduler;
    }
}
