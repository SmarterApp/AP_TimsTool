package org.opentestsystem.ap.timstool.configuration;

import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.apache.http.impl.client.CloseableHttpClient;
import org.opentestsystem.ap.timstool.SecurityProperties;
import org.opentestsystem.ap.timstool.ToolProperties;
import org.opentestsystem.ap.timstool.gateway.GatewayResponseErrorHandler;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;
import org.springframework.scheduling.TaskScheduler;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import org.springframework.security.oauth2.client.OAuth2RestOperations;
import org.springframework.security.oauth2.client.OAuth2RestTemplate;
import org.springframework.security.oauth2.client.resource.BaseOAuth2ProtectedResourceDetails;
import org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails;
import org.springframework.security.oauth2.client.token.grant.password.ResourceOwnerPasswordResourceDetails;
import org.springframework.security.oauth2.common.AuthenticationScheme;
import org.springframework.web.client.RestTemplate;

@Slf4j
@Configuration
@EnableConfigurationProperties({ToolProperties.class, SecurityProperties.class})
public class ToolConfiguration {

    private final ToolProperties properties;

    private final SecurityProperties securityProperties;

    private final CloseableHttpClient httpClient;

    public ToolConfiguration(ToolProperties properties,
                             SecurityProperties securityProperties,
                             CloseableHttpClient httpClient) {
        this.properties = properties;
        this.securityProperties = securityProperties;
        this.httpClient = httpClient;
    }

    @Bean
    public OAuth2RestOperations oAuth2RestTemplate() {
        OAuth2RestTemplate restTemplate = new OAuth2RestTemplate(oauth2ProtectedResourceDetails());
        restTemplate.setRequestFactory(clientHttpRequestFactory());
        restTemplate.setErrorHandler(new GatewayResponseErrorHandler());
        return restTemplate;
    }

    private OAuth2ProtectedResourceDetails oauth2ProtectedResourceDetails() {
        final ResourceOwnerPasswordResourceDetails resourceDetails =
            new ResourceOwnerPasswordResourceDetails();

        resourceDetails.setUsername(securityProperties.getUsername());
        resourceDetails.setPassword(securityProperties.getPassword());
        resourceDetails.setClientId(securityProperties.getClientId());
        resourceDetails.setClientSecret(securityProperties.getClientSecret());
        resourceDetails.setAccessTokenUri(securityProperties.getUrl());
        resourceDetails.setGrantType(securityProperties.getGrantType());

        return resourceDetails;
    }

    @Bean
    public ObjectMapper objectMapper() {
        return Jackson2ObjectMapperBuilder.json().build();
    }

    @Bean
    public HttpComponentsClientHttpRequestFactory clientHttpRequestFactory() {
        log.debug("Create bean clientHttpRequestFactory");
        HttpComponentsClientHttpRequestFactory clientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory();
        clientHttpRequestFactory.setHttpClient(httpClient);
        return clientHttpRequestFactory;
    }

    @Bean
    public TaskScheduler taskScheduler() {
        log.debug("Create bean taskScheduler");
        ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();
        scheduler.setThreadNamePrefix("poolScheduler");
        scheduler.setPoolSize(5);
        return scheduler;
    }
}
