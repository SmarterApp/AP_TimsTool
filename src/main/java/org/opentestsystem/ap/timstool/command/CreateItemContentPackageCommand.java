package org.opentestsystem.ap.timstool.command;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.timstool.ToolProperties;
import org.opentestsystem.ap.timstool.commandline.ToolCommandLine;
import org.opentestsystem.ap.timstool.exception.UsageException;
import org.opentestsystem.ap.timstool.model.CreateItemContentPackageResponse;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.client.OAuth2RestOperations;
import org.springframework.stereotype.Component;

import java.util.List;

@Slf4j
@Component
public class CreateItemContentPackageCommand implements Command {
    private final ToolProperties properties;

    private final OAuth2RestOperations restTemplate;

    private final String commandName;

    public CreateItemContentPackageCommand(ToolProperties properties, OAuth2RestOperations restTemplate) {
        this.properties = properties;
        this.restTemplate = restTemplate;
        this.commandName = CommandEnum.CreateItemContentPackage.getText();
    }

    // ------------------------------------------------------------------------

    @Override
    public void execute(ToolCommandLine commandLine) {
        this.validate(commandLine);
        commandLine.printMessage("validated..., submitting request to TIMS translation service");
        this.submitRequest(commandLine);
    }

    // ------------------------------------------------------------------------

    private void submitRequest(ToolCommandLine commandLine) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<CreateItemContentPackageRequest> requestEntity = new HttpEntity<>(
            new CreateItemContentPackageRequest(commandLine.getItemIds()), headers);

        ResponseEntity<CreateItemContentPackageResponse> response = this.restTemplate
            .postForEntity(
                String.format("%s/%s", this.properties.getApiGatewayUrl(),
                    this.properties.getTranslationContentPackageEndpoint()),
                requestEntity,
                CreateItemContentPackageResponse.class);

        if (response.getStatusCode() == HttpStatus.CREATED) {
            commandLine.printMessage("The content package creation request was successful:");
            commandLine.printMessage(String
                .format("Content Package Id: %s \nItem Ids: %s", response.getBody().getId(),
                    response.getBody().getItemIds()));
        } else {
            commandLine
                .printMessage(String.format("The content package creation request failed: \n %s", response.toString()));
        }
    }

    private void validate(ToolCommandLine commandLine) {
        if (commandLine.getItemIds() == null || commandLine.getItemIds().isEmpty()) {
            throw new UsageException(
                String.format("Command %s requires a list of item ids to be specified.", commandName));
        }
    }

    private class CreateItemContentPackageRequest {
        private String format;
        private List<String> itemIds;

        private CreateItemContentPackageRequest() {
        }

        CreateItemContentPackageRequest(final List<String> itemIds) {
            this.itemIds = itemIds;
            this.format = "SAAIF";
        }

        public String getFormat() {
            return format;
        }

        public List<String> getItemIds() {
            return itemIds;
        }
    }
}
