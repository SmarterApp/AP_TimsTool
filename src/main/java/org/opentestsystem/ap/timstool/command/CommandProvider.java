package org.opentestsystem.ap.timstool.command;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.timstool.commandline.ToolCommandLineCommands;
import org.opentestsystem.ap.timstool.exception.CommandException;
import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.stereotype.Component;

/**
 * The provider utilizes Spring to give instances of command classes.  The bean name is provided for the look up. The
 * command beans are singletons and stateless.
 */
@Slf4j
@Component
public class CommandProvider implements ApplicationContextAware {

    /*
     * Command beans are named with the suffix "Command"
     */
    private static final String COMMAND_BEAN_SUFFIX = "Command";

    private final ToolCommandLineCommands commands;

    private ApplicationContext context;

    public CommandProvider() {
        this.commands = new ToolCommandLineCommands();
    }

    public Command getCommandBean(String commandName) {
        log.info("getting spring bean {}", commandName);
        try {
            String beanName = this.getCommandBeanName(commandName);
            return context.getBean(beanName, Command.class);
        } catch (BeansException e) {
            throw new CommandException(
                "Error getting command bean for " + commandName + ": " + e.getMessage());
        }
    }

    @Override
    public void setApplicationContext(ApplicationContext context) throws BeansException {
        log.debug("setting application context");
        this.context = context;
    }

    private String getCommandBeanName(String commandName) {
        return this.commands.getCommands().get(commandName) + COMMAND_BEAN_SUFFIX;
    }
}
