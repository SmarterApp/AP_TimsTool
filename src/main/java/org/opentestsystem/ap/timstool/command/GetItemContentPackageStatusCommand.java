package org.opentestsystem.ap.timstool.command;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.timstool.ToolProperties;
import org.opentestsystem.ap.timstool.commandline.ToolCommandLine;
import org.opentestsystem.ap.timstool.exception.UsageException;
import org.opentestsystem.ap.timstool.model.CreateItemContentPackageResponse;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.client.OAuth2RestOperations;
import org.springframework.stereotype.Component;
import org.springframework.util.MultiValueMap;

@Slf4j
@Component
public class GetItemContentPackageStatusCommand implements Command {
    private final ToolProperties properties;

    private final OAuth2RestOperations restTemplate;

    private final String commandName;

    public GetItemContentPackageStatusCommand(ToolProperties properties, OAuth2RestOperations restTemplate) {
        this.properties = properties;
        this.restTemplate = restTemplate;
        this.commandName = CommandEnum.GetItemContentStatusCommand.getText();
    }

    // ------------------------------------------------------------------------

    @Override
    public void execute(ToolCommandLine commandLine) {
        this.validate(commandLine);
        commandLine.printMessage("validated..., submitting request to TIMS translation service");
        this.submitRequest(commandLine);
    }

    // ------------------------------------------------------------------------

    private void submitRequest(ToolCommandLine commandLine) {
        HttpHeaders headers = new HttpHeaders();

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(headers);
        long contentPackageId = commandLine.getContentPackageId();

        ResponseEntity<CreateItemContentPackageResponse> response = this.restTemplate
            .exchange(
                String.format("%s/%s/%s", this.properties.getApiGatewayUrl(),
                    this.properties.getTranslationContentPackageEndpoint(), contentPackageId),
                HttpMethod.GET,
                requestEntity,
                CreateItemContentPackageResponse.class
            );

        if (response.getStatusCode() == HttpStatus.OK) {
            commandLine.printMessage(String
                .format("Content Package Status for id %s: %s", contentPackageId, response.getBody().getStatus()));
        } else {
            commandLine
                .printMessage(
                    String.format("Could not fetch item content for content package id %s: \n %s", contentPackageId,
                        response.toString()));
        }
    }

    private void validate(ToolCommandLine commandLine) {
        if (commandLine.getContentPackageId() == null) {
            throw new UsageException(
                String.format("Command %s requires a content package id be specified.", commandName));
        }
    }
}
