package org.opentestsystem.ap.timstool.command;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.timstool.ToolProperties;
import org.opentestsystem.ap.timstool.commandline.ToolCommandLine;
import org.opentestsystem.ap.timstool.exception.UsageException;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.client.OAuth2RestOperations;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import java.nio.file.Path;
import java.util.function.Consumer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static java.util.regex.Pattern.compile;

/**
 * Calls the Test Management Service passing it an Excel spreadsheet.  The response is written to a file.
 */
@Slf4j
@Component
public class CreateTestPackageCommand implements Command {

    private final ToolProperties properties;

    private final OAuth2RestOperations restTemplate;

    private final String commandName;

    // Matcher for id attribute of TestPackage tag.
    private static final Pattern PACKAGE_ID_REGEX =
            compile("<TestPackage[^>]*id=\"([^\"]*)\"[^>]*>", Pattern.DOTALL);

    private static final String EXTENSION = ".xml";

    public CreateTestPackageCommand(ToolProperties properties, OAuth2RestOperations restTemplate) {
        this.properties = properties;
        this.restTemplate = restTemplate;
        this.commandName = CommandEnum.CreateTestPackage.getText();
    }

    // ------------------------------------------------------------------------

    @Override
    public void execute(ToolCommandLine commandLine) {
        this.validate(commandLine);
        commandLine.printMessage("validated..., submitting request to TIMS");
        this.submitRequest(commandLine);
    }

    // ------------------------------------------------------------------------

    private void submitRequest(ToolCommandLine commandLine) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("file", commandLine.getInputFileAsResource());

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        ResponseEntity<String> response = this.restTemplate
            .postForEntity(String.format("%s/%s", this.properties.getApiGatewayUrl(),
                this.properties.getCreateTestManagementEndpoint()),
                requestEntity,
                String.class);

        String packageId = extractPackageId(response.getBody(), commandLine::printCommandError);
        Path outputFile = commandLine.writeToOutputFile(packageId + EXTENSION, response.getBody());
        commandLine.printMessage("The results have been written to %s", outputFile.toString());
    }

    private String extractPackageId(final String packageBody, final Consumer<String> errorHandler) {
        Matcher matcher = PACKAGE_ID_REGEX.matcher(packageBody);
        if (matcher.find()) {
            return matcher.group(1);
        }

        errorHandler.accept("Cannot extract Test Package ID.");
        return "UNKNOWN_PACKAGE_ID";
    }

    private void validate(ToolCommandLine commandLine) {
        if (!commandLine.hasInputFile()) {
            throw new UsageException(String.format("Command %s requires an input file be specified.", commandName));
        }
    }
}

