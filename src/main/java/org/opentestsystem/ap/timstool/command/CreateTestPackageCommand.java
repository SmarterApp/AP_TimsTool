package org.opentestsystem.ap.timstool.command;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.timstool.ToolProperties;
import org.opentestsystem.ap.timstool.commandline.ToolCommandLine;
import org.opentestsystem.ap.timstool.exception.UsageException;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import java.nio.file.Path;

/**
 * Calls the Test Management Service passing it an Excel spreadsheet.  The response is written to a file.
 */
@Slf4j
@Component
public class CreateTestPackageCommand implements Command {

    private final ToolProperties properties;

    private final RestTemplate restTemplate;

    private final String commandName;

    public CreateTestPackageCommand(ToolProperties properties, RestTemplate restTemplate) {
        this.properties = properties;
        this.restTemplate = restTemplate;
        this.commandName = CommandEnum.CreateTestPackage.getText();
    }

    // ------------------------------------------------------------------------

    @Override
    public void execute(ToolCommandLine commandLine) {
        this.validate(commandLine);
        commandLine.printMessage("validated..., submitting request to TIMS");
        this.submitRequest(commandLine);
    }

    // ------------------------------------------------------------------------

    private void submitRequest(ToolCommandLine commandLine) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);
        headers.set("Authorization", "Bearer " + commandLine.getAuthToken());

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("file", commandLine.getInputFileAsResource());

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        ResponseEntity<String> response = this.restTemplate
            .postForEntity(this.properties.getCreateTestManagementEndpoint(), requestEntity, String.class);

        Path outputFile = commandLine.writeToOutputFile(response.getBody());
        commandLine.printMessage("The results have been written to %s", outputFile.toString());
    }

    private void validate(ToolCommandLine commandLine) {
        if (!commandLine.hasInputFile()) {
            throw new UsageException(String.format("Command %s requires an input file be specified.", commandName));
        }
        if (!commandLine.hasOutputFile()) {
            throw new UsageException(String.format("Command %s requires an output file be specified.", commandName));
        }
        if (!commandLine.hasAuthToken()) {
            throw new UsageException(
                String.format("Command %s requires an authorization token be specified.", commandName));
        }
    }
}

