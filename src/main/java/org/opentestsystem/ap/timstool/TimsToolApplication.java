/*
 *  Copyright 2019 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.timstool;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.timstool.command.Command;
import org.opentestsystem.ap.timstool.commandline.ToolCommandLine;
import org.opentestsystem.ap.timstool.commandline.ToolCommands;
import org.opentestsystem.ap.timstool.exception.CommandException;
import org.opentestsystem.ap.timstool.exception.UsageException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@Slf4j
@SpringBootApplication
public class TimsToolApplication implements CommandLineRunner {

    private final ToolCommandLine toolCommandLine;

    @Autowired
    public TimsToolApplication(ToolProperties toolProperties, ToolCommands toolCommands) {
        this.toolCommandLine = new ToolCommandLine(toolProperties, toolCommands);
    }

    /**
     * Created this constructor to allow for injection of main property on this class {@link ToolCommandLine}.
     */
    public TimsToolApplication(ToolCommandLine toolCommandLine) {
        this.toolCommandLine = toolCommandLine;
    }

    public static void main(String[] args) {
        System.out.println("starting...");
        System.out.println();
        SpringApplication.run(TimsToolApplication.class, args).close();
        System.out.println();
        System.out.println("complete");
    }

    // ------------------------------------------------------------------------

    @Override
    public void run(String... args) {
        this.toolCommandLine.applyArgs(args);
        try {
            if (toolCommandLine.hasShowHelp()) {
                toolCommandLine.printHelp();
            } else if (toolCommandLine.hasShowCommands()) {
                toolCommandLine.printCommands();
            } else if (toolCommandLine.isCommandMissing()) {
                toolCommandLine.printMessage("The command to execute is missing.");
                toolCommandLine.printHelp();
            } else {
                toolCommandLine.validateCommand();
                this.executeCommand(toolCommandLine);
            }
        } catch (UsageException e) {
            toolCommandLine.printUsageError(e.getMessage());
        } catch (CommandException e) {
            toolCommandLine.printCommandError(e.getMessage());
        } catch (Exception e) {
            toolCommandLine.printMessage("Unexpected error: " + e.getMessage());
        }
    }

    /**
     * Look up the command bean and call execute on it.  Nothing is returned.
     *
     * @param commandLine The command line data containing the command and the options for executing the command.
     */
    private void executeCommand(ToolCommandLine commandLine) {
        Command command = commandLine.getCommandInstance();
        command.execute(commandLine);
    }
}
