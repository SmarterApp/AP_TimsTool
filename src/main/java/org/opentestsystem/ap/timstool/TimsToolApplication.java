/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.timstool;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.io.PrintStream;
import java.io.PrintWriter;

@Slf4j
@SpringBootApplication
public class TimsToolApplication implements CommandLineRunner {

    private static final Options CMD_OPTIONS = new Options();

    private static final PrintStream CONSOLE = System.out;

    private HelpFormatter helpFormatter;

    static {
        CMD_OPTIONS.addOption("h", "help", false, "print this message");
    }

    public TimsToolApplication() {
        this.helpFormatter = new HelpFormatter();
    }

    public static void main(String[] args) {
        CONSOLE.println("starting");
        SpringApplication.run(TimsToolApplication.class, args).close();
        CONSOLE.println("complete");
    }

    @Override
    public void run(String... args) {
        CommandLineParser parser = new DefaultParser();
        try {
            CommandLine line = parser.parse(CMD_OPTIONS, args);
            if (line.hasOption("h")) {
                this.helpFormatter.printHelp("tims", CMD_OPTIONS);
            }
        } catch (ParseException e) {
            String error = "Unexpected exception: " + e.getMessage();
            log.error(error, e);
            CONSOLE.println(error);
        }
    }
}
